import { markdownToPortableText } from '../utils/markdown-to-portable-text';

// Simular el markdown que genera tu IA
const testMarkdown = `
## Introducci√≥n: La Evoluci√≥n Imparable de PineScript

Como desarrollador que ha trabajado con Pine Script‚Ñ¢ desde sus primeras versiones, he sido testigo de una evoluci√≥n fascinante. Lo que comenz√≥ como un lenguaje de scripting relativamente simple para trazar l√≠neas en un gr√°fico se ha transformado en un **ecosistema robusto** para el backtesting y la ejecuci√≥n de estrategias de trading algor√≠tmico.

### H3: Integraci√≥n Nativa de Machine Learning (ML)

La mayor revoluci√≥n ser√°, sin duda, la introducci√≥n de un m√≥dulo de Machine Learning integrado. Olv√≠date de los complejos workarounds con librer√≠as externas o la exportaci√≥n de datos.

*   **Clasificaci√≥n y Regresi√≥n**: Funciones como \`ml.train()\` y \`ml.predict()\` permitir√≠an entrenar modelos simples.
*   **Clustering No Supervisado**: Una funci√≥n como \`ml.kmeans()\` podr√≠a agrupar autom√°ticamente los datos.

### Ejemplo de C√≥digo

Aqu√≠ un ejemplo pr√°ctico:

\`\`\`python
def calculate_rsi(prices, period=14):
    """Calcula el RSI para una serie de precios"""
    deltas = np.diff(prices)
    gains = np.where(deltas > 0, deltas, 0)
    return rsi
\`\`\`

> La cita importante: "El RSI es uno de los indicadores m√°s poderosos"

## 2. Cambios en la Sintaxis

Con nuevas funcionalidades tan potentes, es l√≥gico esperar algunos ajustes:

1. **Modo strict_typing**: Declaraci√≥n expl√≠cita de tipos
2. **Keywords async/await**: Para llamadas as√≠ncronas
3. **Tipos matrix y vector**: Para √°lgebra lineal

### Lista de Bullets

- Item 1 con *cursiva*
- Item 2 con **negrita**
- Item 3 con \`c√≥digo inline\`
`;

console.log('üß™ TEST: Convirtiendo Markdown a Portable Text\n');
console.log('üìÑ Markdown Original:');
console.log('=' .repeat(80));
console.log(testMarkdown.substring(0, 500) + '...\n');

console.log('üîÑ Convirtiendo...\n');

try {
  const portableText = markdownToPortableText(testMarkdown);
  
  console.log('‚úÖ Conversi√≥n EXITOSA!\n');
  console.log('üìä Estad√≠sticas:');
  console.log(`   - Bloques creados: ${portableText.length}`);
  console.log(`   - Markdown original: ${testMarkdown.length} caracteres\n`);
  
  console.log('üé® Primeros 5 bloques convertidos:\n');
  
  portableText.slice(0, 5).forEach((block: any, index: number) => {
    console.log(`${index + 1}. Tipo: ${block._type}`);
    
    if (block._type === 'block') {
      console.log(`   Style: ${block.style || 'normal'}`);
      console.log(`   ListItem: ${block.listItem || 'none'}`);
      console.log(`   Children: ${block.children.length} spans`);
      
      if (block.children[0]) {
        const firstText = block.children[0].text || '';
        console.log(`   Texto: "${firstText.substring(0, 50)}${firstText.length > 50 ? '...' : ''}"`);
        console.log(`   Marks: ${block.children[0].marks?.join(', ') || 'none'}`);
      }
    }
    
    if (block._type === 'codeBlock') {
      console.log(`   Language: ${block.language}`);
      console.log(`   Lines: ${block.code.split('\n').length}`);
    }
    
    console.log('');
  });
  
  console.log('üì¶ JSON Completo (primeros 3 bloques):\n');
  console.log(JSON.stringify(portableText.slice(0, 3), null, 2));
  
  console.log('\nüéâ ¬°EL CONVERSOR FUNCIONA PERFECTAMENTE!');
  console.log('\nüí° Cuando publiques desde la cola, tu markdown se ver√° as√≠ en Sanity.');
  
} catch (error) {
  console.error('‚ùå ERROR en la conversi√≥n:', error);
  process.exit(1);
}

