import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/utils/supabase/server';
import { supabaseAdmin } from '@/utils/supabase/admin';

interface GrokImageRequest {
  prompt: string;
  style?: 'realistic' | 'artistic' | 'cartoon' | 'abstract';
  size?: '1024x1024' | '1024x1792' | '1792x1024';
  quality?: 'standard' | 'hd';
}

interface GrokImageResponse {
  success: boolean;
  imageUrl?: string;
  error?: string;
  details?: any;
}

export async function POST(request: NextRequest) {
  try {
    const { prompt, style = 'realistic', size = '1024x1024', quality = 'standard' }: GrokImageRequest = await request.json();

    if (!prompt) {
      return NextResponse.json(
        { error: 'Prompt is required' },
        { status: 400 }
      );
    }

    // Verificar que el usuario esté autenticado
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
      return NextResponse.json(
        { error: 'Not authenticated' },
        { status: 401 }
      );
    }

    // Verificar permisos de Content Creator
    const { data: admin, error: adminError } = await (supabaseAdmin as any)
      .from('admin_users')
      .select(`
        id,
        status,
        role_id,
        admin_roles (
          slug,
          permissions
        )
      `)
      .eq('email', user.email)
      .eq('status', 'active')
      .single();

    if (adminError || !admin) {
      return NextResponse.json(
        { error: 'Admin user not found' },
        { status: 404 }
      );
    }

    // Verificar permisos de generación de imágenes
    const userPermissions = admin.admin_roles?.permissions || {};
    const hasPermission = userPermissions['content.ai.images'] || admin.admin_roles?.slug === 'super-admin';

    if (!hasPermission) {
      return NextResponse.json(
        { error: 'Insufficient permissions for image generation' },
        { status: 403 }
      );
    }

    // Obtener API key de Grok desde la configuración
    const { data: grokConfig } = await (supabaseAdmin as any)
      .from('system_configuration')
      .select('value')
      .eq('key', 'grok_api_key')
      .single();

    if (!grokConfig?.value) {
      return NextResponse.json(
        { error: 'Grok API key not configured' },
        { status: 400 }
      );
    }

    // Generar imagen con Grok API
    try {
      const grokApiUrl = 'https://api.x.ai/v1/images/generations';
      
      const requestBody = {
        model: 'grok-image-generator', // Modelo específico para generación de imágenes
        prompt: prompt,
        style: style,
        size: size,
        quality: quality,
        n: 1 // Número de imágenes a generar
      };

      console.log('Generating image with Grok:', {
        prompt: prompt.substring(0, 100) + '...',
        style,
        size,
        quality
      });

      const response = await fetch(grokApiUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${grokConfig.value}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Grok API error:', errorData);
        
        return NextResponse.json({
          success: false,
          error: `Grok API error: ${response.status} ${response.statusText}`,
          details: errorData
        });
      }

      const data = await response.json();
      
      // Log para debugging
      console.log('Grok image generation successful:', {
        prompt: prompt.substring(0, 50) + '...',
        created: data.created,
        hasImages: data.data?.length > 0
      });

      if (!data.data || data.data.length === 0) {
        return NextResponse.json({
          success: false,
          error: 'No images generated by Grok API'
        });
      }

      const imageUrl = data.data[0].url;
      
      // Guardar en la cola de contenido como imagen generada
      const { data: queueItem, error: queueError } = await (supabaseAdmin as any)
        .from('ai_content_queue')
        .insert({
          title: `Imagen generada: ${prompt.substring(0, 50)}...`,
          content: JSON.stringify({
            type: 'image',
            prompt: prompt,
            style: style,
            size: size,
            quality: quality,
            imageUrl: imageUrl,
            generatedAt: new Date().toISOString()
          }),
          content_type: 'image',
          language: 'es',
          user_prompt: prompt,
          status: 'pending_review',
          created_by: admin.id,
          tokens_used: 0, // Las imágenes no usan tokens de texto
          processing_time_ms: 0,
        })
        .select()
        .single();

      if (queueError) {
        console.error('Error saving image to queue:', queueError);
        // No fallar la operación por esto
      }

      return NextResponse.json({
        success: true,
        imageUrl: imageUrl,
        details: {
          prompt: prompt,
          style: style,
          size: size,
          quality: quality,
          queueItemId: queueItem?.id,
          generatedAt: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('Grok image generation error:', error);
      return NextResponse.json({
        success: false,
        error: `Error generating image: ${error instanceof Error ? error.message : 'Unknown error'}`,
        details: error
      });
    }

  } catch (error) {
    console.error('Error in Grok image generation:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
